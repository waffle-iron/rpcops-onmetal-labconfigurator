# Keeping for historical reasons but not needed as cobbler has been removed
#clear_cobbler() {
#  echo -e "Removing all cobbler systems"
#  for i in `cobbler system list`; do cobbler system remove --name $i; done;
#
#  echo -e "Removing all cobbler profiles"
#  for i in `cobbler profile list`; do cobbler profile remove --name $i; done;
#
#  echo -e "Removing all cobbler repos"
#  for i in `cobbler repo list`; do cobbler repo remove --name $i; done;
#
#  echo -e "Removing all cobbler distros"
#  for i in `cobbler distro list`; do cobbler distro remove --name $i; done;
#
#  echo -e "Removing custom preseed and resyncing cobbler"
#  rm -f /var/lib/cobbler/kickstarts/ubuntu-server-14.04-unattended-cobbler.seed;
#  cobbler sync;
#}

get_all_hosts () {
python <<EOF
import json
with open('resources/labconfigs/${LAB_CONFIG}.json') as f:
    x = json.loads(f.read())
for i in x.values():
    for k, v in i.items():
      print('%s:%s' % (k, v))
EOF
}

destroy_all() {
  echo -e "Completing removing OpenStack VMs\n"
  # Change to libvirt images directory
  pushd /var/lib/libvirt/images

  # Force shutdown and remove all instances
  for i in `virsh list --all --name|awk '/infra|compute|storage|cinder|ceph|swift|logger/ { print }'`; do virsh destroy $i; done;
  for i in `virsh list --all --name|awk '/infra|compute|storage|cinder|ceph|swift|logger/ { print }'`; do virsh undefine $i; done;

  # Delete all disks
  echo -e "Removing disk images\n"
  find . -regextype posix-extended -iregex '.*(infra|compute|storage|cinder|ceph|swift|logger).*' -delete
  echo -e "Lab completed destroyed\n"

  # Return to previous directory
  popd
}

fix_vpx_license() {
  # Check that empty-expect is installed and install if not
  dpkg --get-selections | grep empty
  rc=$?

  if ! [ $rc -eq 0 ]; then
    apt-get install -y empty-expect
  fi

  # Check if password-less login to VPX is working
  ssh -o BatchMode=yes nsroot@10.5.0.4 'exit'

  if ! [ $? -eq 0 ]; then
    # Copy host key to VPX
    __SSHKEY__=$(cat /root/.ssh/id_rsa.pub|cut -d' ' -f1,2)
    empty -f -i input.fifo -o output.fifo -p vpxconfig.pid -L vpxconfig.log ssh -o StrictHostKeyChecking=no nsroot@10.5.0.4
    empty -w -i output.fifo -o input.fifo "Password" "nsroot\n"
    empty -w -i output.fifo -o input.fifo "> " "shell\n"
    empty -w -i output.fifo -o input.fifo "root\@loadbalancer" "touch /nsconfig/ssh/authorized_keys\n"
    empty -w -i output.fifo -o input.fifo "root\@loadbalancer" "chmod 600 /nsconfig/ssh/authorized_keys\n"
    empty -w -i output.fifo -o input.fifo "root\@loadbalancer" "echo $__SSHKEY__ >> /nsconfig/ssh/authorized_keys\n"
    empty -w -i output.fifo -o input.fifo "root\@loadbalancer" "exit\n"
    empty -w -i output.fifo -o input.fifo "> " "exit\n"
  fi

  # Check for valid VPX license
  ssh nsroot@10.5.0.4 <<EOF | grep -m1 -oP "Load Balancing: ..."
  show license
  EOF

  if ! [ $? -eq 0 ]; then
    # Remove current license
    ssh nsroot@10.5.0.4 <<EOF
    shell rm -f /nsconfig/license/*.lic
  EOF

    # Add new license to load balancer
    ssh nsroot@10.5.0.4 <<EOF
    shell cd /nsconfig/license && \
    curl -sk https://raw.githubusercontent.com/mrhillsman/rpcops-onmetal-labconfigurator/master/resources/files/lb.lic -o lb.lic
  EOF

    # Get session token
    __NSTOKEN__=`curl -s -X POST -H 'Content-Type: application/json' \
    http://10.5.0.4/nitro/v1/config/login \
    -d '{"login": {"username":"nsroot","password":"nsroot","timeout":3600}}'|jq -r .sessionid`

    # Warm reboot the load balancer
    curl -s -X POST -H 'Content-Type: application/json' \
    -H "Cookie: NITRO_AUTH_TOKEN=$__NSTOKEN__" \
    http://10.5.0.4/nitro/v1/config/reboot -d '{"reboot":{"warm":true}}'
  fi
}