#!/usr/bin/env python

import os.path
import sys
import argparse
import libvirt
import subprocess
# import json

if not os.path.exists('/root/.labconfig'):
    sys.exit('Existing lab required to run this script.')

# TODO: rewrite in python
# expects json formatted file with the following
# Arguments: =[required]
# = type [infra,logging,compute,storage,object,ceph]
# = name [string]
# = address [int]
# example: bash rpcops-node-setup ceph.json
# {
#     "ceph": {
#         "ceph01": "241",
#         "ceph02": "242",
#         "ceph03": "243",
#         "ceph04": "244",
#         "ceph05": "245"
#     }
# }

parser = argparse.ArgumentParser(description='Setup individual lab nodes', version='1.0')
# parser.add_argument('-f', '--file', action='store', dest='nodes', default='', type=argparse.FileType('rt'),
#                     help='/path/to/file.json JSON formatted file with node types, names, and addresses')
parser.add_argument('-t', '--type', action='store', dest='type', default='',
                    choices=('infra', 'logging', 'compute', 'storage', 'object', 'ceph'),
                    help='Type of node [infra|logging|compute|storage|object|ceph]')
parser.add_argument('-n', '--name', action='store', dest='name', default='',
                    help='Name of the node, ex. ceph01')
parser.add_argument('-a', '--address', action='store', dest='address', default='', type=int,
                    help='IP address to use; last octet, ex. 170')

# if [ nodes ]:
#     with open(nodes) as f:
#         x = json.loads(f.read())
#     for i in x.values():
#         for k, v in i.items():
#             print('%s:%s' % (k, v))

conn = libvirt.open('qemu:///system')
pool = conn.storagePoolLookupByName('storage')
backing = '/var/lib/libvirt/images/nodebase.qcow2'

vol_types = ['storage', 'object', 'ceph']
extraVolSize = ''
extraVolCount = ''

baseVolXML = "<volume type='file'>\n \
<name>{0}</name>\n \
<capacity unit='M'>{1}</capacity>\n \
<target>\n \
  <format type='qcow2'/>\n \
  <permissions>\n \
    <owner>106</owner>\n \
    <group>109</group>\n \
  </permissions>\n \
</target>\n \
</volume>\n"

extraVolXML = "<volume type='file'>\n \
<name>{0}</name>\n \
<capacity unit='M'>{1}</capacity>\n \
<target>\n \
  <format type='qcow2'/>\n \
  <permissions>\n \
    <owner>106</owner>\n \
    <group>109</group>\n \
  </permissions>\n \
</target>\n \
</volume>\n"

if type in vol_types:
    if type == 'storage':
        extraVolCount = 1
        extraVolSize = 102400
    else:
        extraVolCount = 5
        extraVolSize = 20480


print 'Creating primary data disk for node: {}'.format(name)

createNodeVol = "virsh vol-create-as storage {0}.qcow2 256000M \
--backing-vol {1} --backing-vol-format qcow2 --format qcow2".format(name, backing)

p = subprocess.Popen(createNodeVol, shell=True, stderr=subprocess.PIPE)
output, err = p.communicate()

