#!/bin/bash

# $1 will be the lab configuration requested
# if not set, will use default
# ex. bash rpcops-unattended-setup cephonly

if [ "$#" -eq 1 ]; then
  LAB_CONFIG=$1
else
  LAB_CONFIG='default'
fi

# Configure cobbler (unattended setup handler)

# This is being set because sda is on hosts, vda is kvm, xvda is xen.
DRIVE_NAME="vda"
# This gets the root users SSH-public-key
SSHKEY=$(cat /root/.ssh/id_rsa.pub)
# This is set to instruct the preseed what the default network is expected to be
DEFAULT_NETWORK="eth4"

#  when templated replace \$ with $ and \\ with \
# Not sure what ^ means, check with Kevin
cp templates/ubuntu-server-14.04-unattended-cobbler.seed /var/lib/cobbler/kickstarts/ubuntu-server-14.04-unattended-cobbler.seed
sed -i "s/__DRIVE_NAME__/${DRIVE_NAME}/g" /var/lib/cobbler/kickstarts/ubuntu-server-14.04-unattended-cobbler.seed
sed -i "s|__SSHKEY__|${SSHKEY}|g" /var/lib/cobbler/kickstarts/ubuntu-server-14.04-unattended-cobbler.seed
sed -i "s/__DEFAULT_NETWORK__/${DEFAULT_NETWORK}/g" /var/lib/cobbler/kickstarts/ubuntu-server-14.04-unattended-cobbler.seed

# Restart services again and configure autostart
service cobblerd restart
service apache2 restart
service xinetd stop
service xinetd start
update-rc.d cobblerd defaults

# Mount Ubuntu server iso
mkdir -p /var/cache/iso
pushd /var/cache/iso
cp /labshare/isos/ubuntu-14.04.4-server-amd64.iso .
popd

# import cobbler image
if ! cobbler distro list | grep -qw "ubuntu-14.04.4-server-x86_64"; then
  mkdir -p /mnt/iso
  mount -o loop /var/cache/iso/ubuntu-14.04.4-server-amd64.iso /mnt/iso
  cobbler import --name=ubuntu-14.04.4-server-amd64 --path=/mnt/iso
  umount /mnt/iso
fi

# Create cobbler profile
if ! cobbler profile list | grep -qw "ubuntu-14.04.4-server-unattended"; then
  cobbler profile add \
    --name ubuntu-14.04.4-server-unattended \
    --distro ubuntu-14.04.4-server-x86_64 \
    --kickstart /var/lib/cobbler/kickstarts/ubuntu-server-14.04-unattended-cobbler.seed

  # sync cobbler
  cobbler sync
fi

# Get Loaders
cobbler get-loaders

# Update Cobbler Signatures
cobbler signature update

function wait_ssh() {
echo "Waiting for all nodes to become available. This can take around 10 min"
for node in $(get_all_hosts); do
    echo "Waiting for node: ${node%%":"*} on 10.0.0.${node#*":"}"
    ssh -q -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=10 10.0.0.${node#*":"} exit > /dev/null
    while test $? -gt 0; do
      sleep 15
      ssh -q -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=10 10.0.0.${node#*":"} exit > /dev/null
    done
done
}

function get_host_type () {
python <<EOF
import json
with open('resources/labconfigs/${LAB_CONFIG}.json') as f:
    x = json.loads(f.read())
for k, v in x.get("$1").items():
    print('%s:%s' % (k, v))
EOF
}

function get_all_hosts () {
python <<EOF
import json
with open('resources/labconfigs/${LAB_CONFIG}.json') as f:
    x = json.loads(f.read())
for i in x.values():
    for k, v in i.items():
      print('%s:%s' % (k, v))
EOF
}

# Create the cobbler systems
for node in $(get_all_hosts); do
  hexchars="0123456789ABCDEF"
  maddr=52:54:00:$( for i in {1..6} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/:\1/g' )
  if ! cobbler system list | grep -qw "${node%%":"*}"; then
    cobbler system add \
      --name=${node%%":"*} \
      --profile=ubuntu-14.04.4-server-unattended \
      --hostname=${node%%":"*}.local \
      --kopts="interface=${DEFAULT_NETWORK}" \
      --interface=${DEFAULT_NETWORK} \
      --mac="${maddr}" \
      --ip-address="10.6.0.${node#*":"}" \
      --subnet=255.255.255.0 \
      --gateway=10.6.0.1 \
      --name-servers=69.20.0.164 69.20.0.196 \
      --static=1
  fi
done

# sync cobbler
cobbler sync

# Restart XinetD
service xinetd stop
service xinetd start

# Create the VM root disk then define and start the VMs.
#  !!!THIS TASK WILL DESTROY ALL OF THE ROOT DISKS IF THEY ALREADY EXIST!!!
for node in $(get_all_hosts); do
  qemu-img create -f qcow2 /var/lib/libvirt/images/${node%%":"*}.openstackci.local.img 252G
  cp templates/vmnode.openstackci.local.xml /etc/libvirt/qemu/${node%%":"*}.openstackci.local.xml
  sed -i "s/__NODE__/${node%%":"*}/g" /etc/libvirt/qemu/${node%%":"*}.openstackci.local.xml
  sed -i "s/__COUNT__/${node:(-2)}/g" /etc/libvirt/qemu/${node%%":"*}.openstackci.local.xml
  virsh define /etc/libvirt/qemu/${node%%":"*}.openstackci.local.xml || true
  virsh create /etc/libvirt/qemu/${node%%":"*}.openstackci.local.xml
  cp templates/vmnode.openstackci.local-bridges.cfg /opt/osa-${node%%":"*}.openstackci.local-bridges.cfg
  sed -i "s/__COUNT__/${node#*":"}/g" /opt/osa-${node%%":"*}.openstackci.local-bridges.cfg
done

# Wait here for all nodes to be booted and ready with SSH
wait_ssh
